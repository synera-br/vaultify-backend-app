package api

import (
	"fmt"
	"log"

	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"

	// IMPORTANT: Replace 'project-layout-template/docs' with your actual module path + /docs
	// Example: if your go.mod module is 'github.com/myuser/myproject', then use 'github.com/myuser/myproject/docs'
	// This will be generated by `swag init`
	_ "project-layout-template/docs" // Adjust this to your project's module path
)

// GinService is an implementation of the API interface using Gin.
type GinService struct {
	router *gin.Engine
}

// NewGinService creates a new GinService.
// @title Your API Title
// @version 1.0
// @description This is a sample server for a Go project.
// @termsOfService http://swagger.io/terms/

// @contact.name API Support
// @contact.url http://www.swagger.io/support
// @contact.email support@swagger.io

// @license.name Apache 2.0
// @license.url http://www.apache.org/licenses/LICENSE-2.0.html

// @host localhost:8080
// @BasePath /
func NewGinService() API {
	r := gin.Default()
	return &GinService{router: r}
}

// RegisterRoutes registers application routes.
func (s *GinService) RegisterRoutes(router *gin.Engine) {
	// Health check route
	// @Summary Show the status of server.
	// @Description get the status of server.
	// @Tags Health
	// @Accept */*
	// @Produce json
	// @Success 200 {object} map[string]interface{}
	// @Router /health [get]
	router.GET("/health", func(c *gin.Context) {
		c.JSON(200, gin.H{
			"status": "UP",
		})
	})

	// Swagger documentation route
	// url := ginSwagger.URL("/swagger/doc.json") // The url pointing to API definition
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	// Example of a versioned API group
	// v1 := router.Group("/v1")
	// {
	//  // Add v1 routes here
	// }
}

// Run starts the Gin HTTP server.
func (s *GinService) Run(addr string) error {
	s.RegisterRoutes(s.router) // Register routes before running
	log.Printf("Gin server starting on %s", addr)
	log.Printf("Swagger documentation available at http://%s/swagger/index.html", addr)
	return s.router.Run(addr)
}

// GetRouter returns the underlying Gin router.
func (s *GinService) GetRouter() *gin.Engine {
	return s.router
}
